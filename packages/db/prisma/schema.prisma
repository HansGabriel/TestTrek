// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String               @id @default(cuid()) @map("user_id")
    email         String               @unique
    userId        String               @unique @map("clerk_user_id")
    username      String
    firstName     String               @map("first_name")
    lastName      String               @map("last_name")
    imageUrl      String?              @map("image_url")
    about         String?              @db.Text
    createdAt     DateTime             @default(now()) @map("created_at")
    updatedAt     DateTime             @updatedAt @map("updated_at")
    tests         Test[]
    collections   Collection[]
    plays         Play[]
    favoriteTests UserOnFavoriteTest[]
    reviewer      Reviewer[]

    @@map("Users")
}

model UserOnFavoriteTest {
    id        String   @unique @default(cuid()) @map("user_on_favorite_test_id")
    userId    String   @map("user_id")
    testId    String   @map("test_id")
    user      User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
    test      Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@id([userId, testId])
    @@map("UsersOnFavoriteTests")
}

model Test {
    id             String               @id @default(cuid()) @map("test_id")
    userId         String               @map("user_id")
    imageUrl       String               @map("image_url")
    title          String
    description    String               @db.Text
    visibility     Visibility
    keywords       Keyword[]
    createdAt      DateTime             @default(now()) @map("created_at")
    updatedAt      DateTime             @updatedAt @map("updated_at")
    deletedAt      DateTime?            @map("deleted_at")
    collections    TestOnCollection[]
    questions      Question[]
    user           User                 @relation(fields: [userId], references: [userId])
    plays          Play[]
    reviewers      ReviewerOnTest[]
    favoritedUsers UserOnFavoriteTest[]
    isDeleted      Boolean              @default(false) @map("is_deleted")

    @@map("Tests")
}

model Reviewer {
    id         String           @id @default(cuid()) @map("reviewer_id")
    title      String
    imageUrl   String           @map("image_url")
    testId     String?          @map("test_id")
    content    String           @db.Text
    visibility Visibility
    userId     String           @map("user_id")
    user       User             @relation(fields: [userId], references: [userId])
    tests      ReviewerOnTest[]
    createdAt  DateTime         @default(now()) @map("created_at")
    updatedAt  DateTime         @updatedAt @map("updated_at")
    deletedAt  DateTime?        @map("deleted_at")
    isDeleted  Boolean          @default(false) @map("is_deleted")

    @@map("Reviewers")
}

model ReviewerOnTest {
    id         String   @unique @default(cuid()) @map("reviewer_on_test_id")
    testId     String   @map("test_id")
    test       Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
    reviewer   Reviewer @relation(fields: [reviewerId], references: [id], onDelete: Cascade)
    reviewerId String   @map("reviewer_id")
    createdAt  DateTime @default(now()) @map("created_at")
    updatedAt  DateTime @updatedAt @map("updated_at")

    @@id([testId, reviewerId])
    @@map("ReviewersOnTests")
}

model Question {
    id              String       @id @default(cuid()) @map("question_id")
    testId          String       @map("test_id")
    title           String
    image           String?
    time            Int
    points          Int
    type            QuestionType
    test            Test         @relation(fields: [testId], references: [id], onDelete: Cascade)
    choices         Choice[]
    answer          String?
    possibleAnswers String[]     @map("possible_answers")
    createdAt       DateTime     @default(now()) @map("created_at")
    updatedAt       DateTime     @updatedAt @map("updated_at")

    @@map("Questions")
}

model Choice {
    id         String   @id @default(cuid()) @map("choice_id")
    questionId String   @map("question_id")
    text       String
    isCorrect  Boolean  @map("is_correct")
    question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    createdAt  DateTime @default(now()) @map("created_at")
    updatedAt  DateTime @updatedAt @map("updated_at")

    @@map("Choices")
}

model Keyword {
    id        String   @id @default(cuid()) @map("keyword_id")
    name      String
    test      Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
    testId    String   @map("test_id")
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@map("Keywords")
}

model Collection {
    id         String             @id @default(cuid()) @map("collection_id")
    userId     String             @map("user_id")
    title      String
    imageUrl   String             @map("image_url")
    createdAt  DateTime           @default(now()) @map("created_at")
    updatedAt  DateTime           @updatedAt @map("updated_at")
    deletedAt  DateTime?          @map("deleted_at")
    tests      TestOnCollection[]
    user       User               @relation(fields: [userId], references: [userId])
    visibility Visibility         @default(private)
    isDeleted  Boolean            @default(false) @map("is_deleted")

    @@map("Collections")
}

model TestOnCollection {
    id            String     @unique @default(cuid()) @map("test_on_collection_id")
    test          Test       @relation(fields: [testId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    testId        String     @map("test_id")
    collection    Collection @relation(fields: [collectionsId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    collectionsId String     @map("collections_id")
    createdAt     DateTime   @default(now()) @map("created_at")
    updatedAt     DateTime   @updatedAt @map("updated_at")

    @@id([testId, collectionsId])
    @@map("TestsOnCollections")
}

model Play {
    id         String   @id @default(cuid()) @map("play_id")
    testId     String   @map("test_id")
    playerId   String   @map("player_id")
    createdAt  DateTime @default(now()) @map("created_at")
    updatedAt  DateTime @updatedAt @map("updated_at")
    player     User     @relation(fields: [playerId], references: [userId])
    test       Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
    isFinished Boolean  @default(false) @map("is_finished")
    score      Int?
    time       Int?

    @@map("Plays")
}

enum Visibility {
    public
    private
}

enum QuestionType {
    multiple_choice
    true_or_false
    multi_select
    identification
    enumeration
}
