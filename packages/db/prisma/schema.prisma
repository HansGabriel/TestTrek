// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String               @id @default(cuid())
    email         String               @unique
    userId        String               @unique
    username      String
    firstName     String
    lastName      String
    imageUrl      String?
    about         String?              @db.Text
    createdAt     DateTime             @default(now())
    updatedAt     DateTime             @updatedAt
    tests         Test[]
    collections   Collection[]
    plays         Play[]
    favoriteTests UserOnFavoriteTest[]
    Reviewer      Reviewer[]
}

model Post {
    id      String @id @default(cuid())
    title   String
    content String
}

model UserOnFavoriteTest {
    userId    String
    testId    String
    user      User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
    test      Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([userId, testId])
}

model Test {
    id             String               @id @default(cuid())
    userId         String
    imageUrl       String
    title          String
    description    String               @db.Text
    visibility     Visibility
    keywords       Keyword[]
    createdAt      DateTime             @default(now())
    updatedAt      DateTime             @updatedAt
    collections    TestOnCollection[]
    questions      Question[]
    user           User                 @relation(fields: [userId], references: [userId])
    plays          Play[]
    reviewers      ReviewerOnTest[]
    favoritedUsers UserOnFavoriteTest[]
}

model Reviewer {
    id         String           @id @default(cuid())
    title      String
    imageUrl   String
    testId     String?
    content    String           @db.Text
    visibility Visibility
    userId     String
    user       User             @relation(fields: [userId], references: [userId])
    tests      ReviewerOnTest[]
    createdAt  DateTime         @default(now())
    updatedAt  DateTime         @updatedAt
}

model ReviewerOnTest {
    testId     String
    test       Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
    reviewer   Reviewer @relation(fields: [reviewerId], references: [id], onDelete: Cascade)
    reviewerId String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@id([testId, reviewerId])
}

model Question {
    id              String       @id @default(cuid())
    testId          String
    title           String
    image           String?
    time            Int
    points          Int
    type            QuestionType
    test            Test         @relation(fields: [testId], references: [id], onDelete: Cascade)
    choices         Choice[]
    answer          String?
    possibleAnswers String[]
}

model Choice {
    id         String   @id @default(cuid())
    questionId String
    text       String
    isCorrect  Boolean
    question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Keyword {
    id        String   @id @default(cuid())
    name      String
    test      Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
    testId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Collection {
    id         String             @id @default(cuid())
    userId     String
    title      String
    imageUrl   String
    createdAt  DateTime           @default(now())
    updatedAt  DateTime           @updatedAt
    tests      TestOnCollection[]
    user       User               @relation(fields: [userId], references: [userId])
    visibility Visibility         @default(private)
}

model TestOnCollection {
    test          Test       @relation(fields: [testId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    testId        String
    collection    Collection @relation(fields: [collectionsId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    collectionsId String
    createdAt     DateTime   @default(now())
    updatedAt     DateTime   @updatedAt

    @@id([testId, collectionsId])
}

model Play {
    id         String   @id @default(cuid())
    testId     String
    playerId   String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    player     User     @relation(fields: [playerId], references: [userId])
    test       Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
    isFinished Boolean  @default(false)
    score      Int?
    time       Int?
}

enum Visibility {
    public
    private
}

enum QuestionType {
    multiple_choice
    true_or_false
    multi_select
    identification
    enumeration
}
